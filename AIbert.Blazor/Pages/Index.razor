@page "/"
@using System.Text.Json;
@using System.Text.RegularExpressions;
@using System.Web;
@using AIbert.Models;
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting;

@inject IWebAssemblyHostEnvironment env;
@inject HttpClient Http;

<PageTitle>AIbert v0.7.2</PageTitle>

<MudText Typo="Typo.h2">Chat with AIbert</MudText>

<MudGrid>
    <MudItem md="6" xs="12">
        <MudText Typo="Typo.h4">Settings</MudText>
        <p><MudTextField T="string" Label="Initial Prompt" Variant="Variant.Outlined" @bind-Value="initialSystemPrompt" Lines="5" /></p>
        <p><MudTextField T="string" Label="System Prompt" Variant="Variant.Outlined" @bind-Value="systemPrompt" Lines="30" /></p>
        <p><MudTextField T="string" Label="Promise Prompt" Variant="Variant.Outlined" @bind-Value="promisePrompt" Lines="10" /></p>

        <p>
            <MudSlider @bind-Value="temperature" T="decimal" Min="0.0m" Max="2.0m" Step="0.1m" TickMarks="true" Color="Color.Primary">Temperature: @temperature.ToString()</MudSlider>
        </p>
        <p>
            <MudSlider @bind-Value="topP" T="decimal" Min="0.0m" Max="1.0m" Step="0.1m" TickMarks="true" Color="Color.Primary">Top P: @topP.ToString()</MudSlider>
        </p>

        <p>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveSettings">Save settings</MudButton>
            @if (isSaving)
            {
                <MudText>Saving...</MudText>
            }
        </p>

        <MudText Typo="Typo.h4">Threads</MudText>
        <p>
            @threadsList
        </p>
    </MudItem>

    <MudItem md="6" xs="12">
        <MudText Typo="Typo.h4">Participants</MudText>
        <p>ThreadId: @threadId</p>
        <p>
            <MudTextField T="string" Label="From (You): Participant 1" Variant="Variant.Outlined" @bind-Value="sender" />
            <MudButton ButtonType="ButtonType.Button" Color="Color.Surface" Variant="Variant.Filled" OnClick="SwapParticipants">Swap</MudButton>
            <MudTextField T="string" Label="To: Participant 2" Variant="Variant.Outlined" @bind-Value="participant2" />
        </p>
        <p>
            <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Variant="Variant.Filled" OnClick="GetThread">Get/Create Thread</MudButton>
        </p>

        <MudText Typo="Typo.h4">Your Message</MudText>
        <p hidden="@threadId != string.Empty">You must start a thread before you can chat.</p>
        <p>
            <MudTextField T="string" Label="Ask something..." @bind-Value="prompt" Variant="Variant.Outlined" Lines="3" />
        </p>
        <p><i>Note: AIbert will not respond back for at lesat 15 seconds (pre-programmed delay) unless specifically asked something.</i></p>
        <p>
            <MudButtonGroup OverrideStyles="false" VerticalAlign="true">
                <MudButtonGroup OverrideStyles="false">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PostAdd" OnClick="AddChat">Add chat</MudButton>
                    <MudButton Color="Color.Secondary" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Clear" IconColor="Color.Warning" OnClick="ClearChat">Clear chat</MudButton>
                </MudButtonGroup>
                <MudButton Color="Color.Primary" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Upload" IconColor="Color.Primary" OnClick="SubmitChat">Upload chat</MudButton>
            </MudButtonGroup>
        </p>

        <p>
            <MudButton Color="Color.Success" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Success" OnClick="AddScenario1">Scenario 1 chats</MudButton>
            <MudButton Color="Color.Success" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Success" OnClick="AddScenario2">Scenario 2 chats</MudButton>
        </p>

        @if (isSending)
        {
            <p>
                <MudText>Sending...</MudText>
                <br />
            </p>
        }

        <div class="promises">
        <MudText Typo="Typo.h5">Promises</MudText>
        @if (promises.Count == 0)
        {
            <p><i>No promises</i></p>
        }
        else
        {
            <ol>
            @foreach (var promise in promises)
            {
                <li>@JsonSerializer.Serialize(promise)</li>
            }
            </ol>
            <MudButton StartIcon="@Icons.Material.Filled.Clear" IconColor="Color.Warning" Variant="Variant.Outlined" OnClick="ClearPromises">Clear promises</MudButton>
        }
        </div>

        <MudText Typo="Typo.h4">Thread</MudText>
        <p>AIbert to respond in: @timerCountdown</p>
        @foreach (var chat in chatHistory)
        {
            var chatParts = chat.message.Split("::");
            <p class="chat @((chat.userId.Contains("AIbert") ? "chat--aibert" : ""))">
                <span class="chat--person">@string.Format("{0} {1}", chat.timestamp, chat.userId)</span>: @((MarkupString)Regex.Replace(
                    HttpUtility.HtmlEncode(chat.message), "\r?\n|\r", "<br />"))
            </p>
        }

        <MudText Typo="Typo.h4">Debug log</MudText>
        <p class="chat">
            @((MarkupString)Regex.Replace(HttpUtility.HtmlEncode(debugLog), "\r?\n|\r", "<br />"))
        </p>
    </MudItem>
</MudGrid>

@code {
    private string prompt = string.Empty;
    private string sender = string.Empty;
    private string participant2 = string.Empty;
    private string initialSystemPrompt = string.Empty;
    private string systemPrompt = string.Empty;
    private string promisePrompt = string.Empty;
    private decimal temperature = 0.0m;
    private decimal topP = 0.0m;
    private bool isSaving = true;
    private bool isSending = false;
    private bool hasPendingMessages = false;
    private const int timerCountdownSet = 30;
    private int timerCountdown = timerCountdownSet;

    private string baseUrl = "/api/";

    private string threadId = string.Empty;
    private List<(string question, string answer)> exampleResponses = new();
    private IList<Chat> chatHistory = new List<Chat>();
    private IList<Promise> promises = new List<Promise>();
    private string threadsList = string.Empty;
    private string debugLog = string.Empty;

    private static System.Timers.Timer aTimer;

    public void StartTimer()
    {
        aTimer = new System.Timers.Timer(1000);
        aTimer.Elapsed += CountDownTimer;
        aTimer.Enabled = true;
    }

    public async void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (timerCountdown > 0)
        {
            timerCountdown -= 1;
        }
        else
        {
            timerCountdown = timerCountdownSet;
            if (hasPendingMessages || isSending) return;
            await GetChat();
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if (env.IsDevelopment())
            baseUrl = "http://localhost:7143/api/";

        await GetSettings();
        await GetChat();
        await GetThreads();
        StartTimer();

        base.OnInitialized();
    }

    private void SwapParticipants()
    {
        var temp = sender;
        sender = participant2;
        participant2 = temp;
    }

    private async Task GetSettings()
    {
        try
        {
            var res = await Http.GetFromJsonAsync<Settings>($"{baseUrl}Settings");
            initialSystemPrompt = res?.InitialSystemPrompt ?? string.Empty;
            systemPrompt = res?.SystemPrompt ?? string.Empty;
            promisePrompt = res?.PromisePrompt ?? string.Empty;
            topP = res?.TopP ?? 0.0m;
            temperature = res?.Temperature ?? 0.0m;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task SaveSettings()
    {
        Settings settings = new(initialSystemPrompt, systemPrompt, promisePrompt, topP, temperature);

        isSaving = true;

        try
        {
            var options = new JsonSerializerOptions();
            options.PropertyNamingPolicy = null;
            using var res = await Http.PutAsJsonAsync($"{baseUrl}Settings", settings, options);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            isSaving = false;
        }
    }

    private void AddChat()
    {
        if (prompt.Length == 0) return;
        var date = DateTime.Now;
        chatHistory.Add(new Chat(Guid.NewGuid(), prompt, sender, date));
        prompt = string.Empty;
        hasPendingMessages = true;
    }

    private async Task SubmitChat()
    {
        AddChat();

        ChatInput input = new(new ChatThread(chatHistory, promises));

        isSending = true;

        try
        {
            using var res = await Http.PostAsJsonAsync($"{baseUrl}Chat", input);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            isSending = false;
            hasPendingMessages = false;
        }
    }

    private async Task GetChat()
    {
        if (string.IsNullOrWhiteSpace(sender) || string.IsNullOrWhiteSpace(participant2))
        {
            return;
        }

        isSending = true;

        try
        {
            var res = await Http.GetStringAsync($"{baseUrl}Chat/{threadId}");
            var chatRes = JsonSerializer.Deserialize<ChatResponse>(res);
            threadId = chatRes?.thread?.threadId ?? string.Empty;
            debugLog = chatRes?.debugLog ?? string.Empty;
            chatHistory = chatRes?.thread?.chats ?? new List<Chat>();
            promises = chatRes?.thread?.promises ?? new List<Promise>();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            isSending = false;
        }
    }

    private async Task GetThread()
    {
        if (string.IsNullOrWhiteSpace(sender) || string.IsNullOrWhiteSpace(participant2))
        {
            return;
        }

        try
        {
            var res = await Http.PostAsJsonAsync($"{baseUrl}Thread", new List<string>() { sender, participant2 });
            threadId = await res.Content.ReadAsStringAsync();
            await ClearChat();
            await ClearPromises();
            await GetChat();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task GetThreads()
    {
        try
        {
            var res = await Http.GetStringAsync($"{baseUrl}Thread");
            // threadsList = res;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task ClearChat()
    {
        try
        {
            // using var res = await Http.DeleteAsync($"{baseUrl}Thread/{threadId}");
            chatHistory.Clear();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task ClearPromises()
    {
        try
        {
            // using var res = await Http.DeleteAsync($"{baseUrl}Promise");
            promises.Clear();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private void AddScenario1()
    {
        var date = DateTime.Now.AddMinutes(-45);
        chatHistory.Add(new Chat(Guid.NewGuid(), "Hey, how are you doing?", "Nick", date));
        chatHistory.Add(new Chat(Guid.NewGuid(), "good, you?", "Brian", date.AddMinutes(5)));
        chatHistory.Add(new Chat(Guid.NewGuid(), "Can you get me that report tomorrow?", "Nick", date.AddMinutes(10)));
        chatHistory.Add(new Chat(Guid.NewGuid(), "Sure, what time?", "Brian", date.AddMinutes(15)));
        chatHistory.Add(new Chat(Guid.NewGuid(), "around 9pm", "Nick", date.AddMinutes(20)));
        chatHistory.Add(new Chat(Guid.NewGuid(), "sounds good", "Brian", date.AddMinutes(25)));
    }

    private void AddScenario2()
    {
        var date = DateTime.Now.AddMinutes(-45);
        chatHistory.Add(new Chat(Guid.NewGuid(), "Hey, can you let me know when you are coming over tomorrow?", "dude1", date));
        chatHistory.Add(new Chat(Guid.NewGuid(), "Yep, no problem.", "dude2", date.AddMinutes(5)));
    }
}
